// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  firstName String
  lastName  String?
  bio       String?
  avatar    String?
  email     String    @unique
  password  String
  followers User[]    @relation("FollowRelation", references: [id])
  following User[]    @relation("FollowRelation", references: [id])
  photos    Photo[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Likes     Like[]
  Comments  Comment[]
  Dialogs   Dialog[]
  Messages  Message[]
}

model Photo {
  id          Int       @id @default(autoincrement())
  userId      Int
  author      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  url         String
  description String?
  hashtags    Hashtag[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Likes       Like[]
  Comments    Comment[]
}

model Hashtag {
  id        Int      @id @default(autoincrement())
  text      String   @unique
  photos    Photo[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  photoId   Int
  userId    Int
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([photoId, userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  photoId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dialog {
  id        Int       @id @default(autoincrement())
  users     User[]
  Messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id        Int      @id @default(autoincrement())
  userId    Int
  dialogId  Int
  text      String
  author    User     @relation(fields: [userId], references: [id])
  dialog    Dialog   @relation(fields: [dialogId], references: [id])
  readed    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
